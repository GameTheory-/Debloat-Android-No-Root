#!/bin/bash

# ===== Variables
PROJECT_NAME="Debloat Android No Root"
VERSION="$PROJECT_NAME v2.0"
DESCRIPTION="Debloat non rooted Android devices"

BASE=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
THIS_SCRIPT=$BASE/$(basename $0)

CONFIG_DIR=$BASE/configs
ADB=$CONFIG_DIR/adb
DESKTOP_SHORTCUT=/home/$(whoami)/.local/share/applications/debloat-android.desktop
ICON=$CONFIG_DIR/icon.svg

UPDATE_URL="https://techstop.github.io/debloat-android-no-root/"
REPO_URL="https://github.com/GameTheory-/debloat-android-no-root"

# ===== ANSI color code variables
BOLD="\e[1m"
CYAN="\e[96m"
BLUEBG="\e[104m"
GREEN="\e[0;32m"
HRED="\e[0;91m"
WHITE="\e[97m"
NC="\e[0m"
EXPND="\e[K"

# ===== make sure adb has exec permission
if [[ ! -x "$ADB" ]]; then
	chmod +x "$ADB"
fi

# ===== for centering strings
ECHO_CENTER() {
	printf "%*s\n" $((( ${#1} + $(tput cols) ) / 2)) "$1"
}

# ===== ECHO_CENTER variables go here
NAME_TXT=$(ECHO_CENTER "$PROJECT_NAME")

# ===== continue
PRESS_ENTER() {
	echo ""
	echo -n -e "	${GREEN}Press Enter to continue${NC} "
	read
	clear
}

# ===== incorrect selection
INCORRECT_SELECTION() {
	echo -e "${HRED}Incorrect selection! Try again.${NC}"
}

# ===== PS3 variable
PS3_VAR() {
	echo ""
	echo "Enter a selection: "
}

# ===== disable applications
DISABLE_PACKAGES() {
	echo -e "${GREEN}Please Wait...${NC}"
	echo ""
	DISABLE=$(echo -e "${GREEN}${BOLD}Disable Applications${NC}")
	QUIT=$(echo -e "${HRED}${BOLD}Quit${NC}")
	PS3="$(PS3_VAR)"
	readarray -t OPTIONS < <("$ADB" shell pm list packages -f -s | grep -oP "(?<=package:).*" | sed 's?^\(.*\)=?\1 = ?')
	select OPT in "${OPTIONS[@]}" "$DISABLE" "$QUIT"; do
		if (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); then
			while (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); do
				LIST_PACKS=$(grep -oP "(?<== ).*" <<< $OPT)
				echo -e "${GREEN}$LIST_PACKS${NC}"
				PACK_LIST+=("$LIST_PACKS")
				break
			done
		elif (( REPLY == 1 + ${#OPTIONS[@]} )); then
			clear
			echo -e "${GREEN}Please Wait...${NC}"
			echo ""
			for plist in ${PACK_LIST[@]}; do
				read ADB_VAR < <("$ADB" shell pm disable-user --user 0 "$plist")
			done
			if [[ "$ADB_VAR" == *disabled-user* ]]; then
				echo -e "${GREEN}Done!${NC}"
			else
				echo -e "${HRED}Could not disable 1 or more of your selected apps.${NC}"
			fi
			break
		elif (( REPLY == 2 + ${#OPTIONS[@]} )); then
			clear
			echo -e "${HRED}Aborted!${NC}"
			break
		else
			echo -e "${HRED}Incorrect selection! Try again.${NC}"
		fi
	done
	unset PACK_LIST
}

# =====  re-enable applications
REENABLE_PACKAGES() {
  echo -e "${GREEN}Please Wait...${NC}"
  echo ""
	REENABLE=$(echo -e "${GREEN}${BOLD}Re-enable Applications${NC}")
	QUIT=$(echo -e "${HRED}${BOLD}Quit${NC}")
	PS3="$(PS3_VAR)"
	readarray -t OPTIONS < <("$ADB" shell pm list packages -d | grep -oP "(?<=package:).*")
	if [ ! -z $OPTIONS ]; then
    select OPT in "${OPTIONS[@]}" "$REENABLE" "$QUIT"; do
      if (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); then
        while (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); do
          echo -e "${GREEN}$OPT${NC}"
          PACK_LIST+=("$OPT")
          break
        done
      elif (( REPLY == 1 + ${#OPTIONS[@]} )); then
        clear
        echo -e "${GREEN}Please Wait...${NC}"
				echo ""
        for plist in ${PACK_LIST[@]}; do
          read ADB_VAR < <("$ADB" shell pm enable "$plist")
        done
        if [[ "$ADB_VAR" == *enabled* ]]; then
          echo -e "${GREEN}Done!${NC}"
        else
          echo -e "${HRED}Could not re-enable 1 or more of your selected apps.${NC}"
        fi
        break
      elif (( REPLY == 2 + ${#OPTIONS[@]} )); then
        clear
        echo -e "${HRED}Aborted!${NC}"
        break
      else
        echo -e "${HRED}Incorrect selection! Try again.${NC}"
      fi
    done
    unset PACK_LIST
  else
    echo -e "${HRED}There are no previously disabled apps to re-enable.${NC}"
  fi
}

# ===== uninstall applications
UNINSTALL_PACKAGES() {
	echo -e "${GREEN}Please Wait...${NC}"
	echo ""
	UNINSTALL=$(echo -e "${GREEN}${BOLD}Uninstall Applications${NC}")
	QUIT=$(echo -e "${HRED}${BOLD}Quit${NC}")
	PS3="$(PS3_VAR)"
	readarray -t OPTIONS < <("$ADB" shell pm list packages -f -s | grep -oP "(?<=package:).*" | sed 's?^\(.*\)=?\1 = ?')
	select OPT in "${OPTIONS[@]}" "$UNINSTALL" "$QUIT"; do
		if (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); then
			while (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); do
				LIST_PACKS=$(grep -oP "(?<== ).*" <<< $OPT)
				echo -e "${GREEN}$LIST_PACKS${NC}"
				PACK_LIST+=("$LIST_PACKS")
				break
			done
		elif (( REPLY == 1 + ${#OPTIONS[@]} )); then
			clear
			echo -e "${GREEN}Please Wait...${NC}"
			echo ""
			for plist in ${PACK_LIST[@]}; do
				read ADB_VAR < <("$ADB" shell pm uninstall --user 0 "$plist")
			done
			if [[ "$ADB_VAR" == *Success* ]]; then
				echo -e "${GREEN}Done!${NC}"
			else
				echo -e "${HRED}Could not uninstall 1 or more of your selected apps.${NC}"
			fi
			break
		elif (( REPLY == 2 + ${#OPTIONS[@]} )); then
			clear
			echo -e "${HRED}Aborted!${NC}"
			break
		else
			echo -e "${HRED}Incorrect selection! Try again.${NC}"
		fi
	done
	unset PACK_LIST
}

# ===== re-install applications
REINSTALL_PACKAGES() {
	echo -e "${GREEN}Please Wait...${NC}"
	echo ""
	REINSTALL=$(echo -e "${GREEN}${BOLD}Re-install Applications${NC}")
	QUIT=$(echo -e "${HRED}${BOLD}Quit${NC}")
	PS3="$(PS3_VAR)"
	readarray -t OPTIONS < <(diff <("$ADB" shell pm list packages) <("$ADB" shell pm list packages -u) | grep -oP '(?<=package:).*')
	if [ ! -z $OPTIONS ]; then
		select OPT in "${OPTIONS[@]}" "$REINSTALL" "$QUIT"; do
			if (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); then
				while (( REPLY > 0 && REPLY <= ${#OPTIONS[@]} )); do
					echo -e "${GREEN}$OPT${NC}"
					PACK_LIST+=("$OPT")
					break
				done
			elif (( REPLY == 1 + ${#OPTIONS[@]} )); then
				clear
				echo -e "${GREEN}Please Wait...${NC}"
				echo ""
				for plist in ${PACK_LIST[@]}; do
					packs=$("$ADB" shell pm dump "$plist" | grep -oP '(?<=path: ).*')
					read ADB_VAR < <("$ADB" shell pm install -r --user 0 "$packs")
				done
				if [[ "$ADB_VAR" == *Success* ]]; then
					echo -e "${GREEN}Done!${NC}"
				else
					echo -e "${HRED}Could not re-install 1 or more of your selected apps.${NC}"
				fi
				break
			elif (( REPLY == 2 + ${#OPTIONS[@]} )); then
				clear
				echo -e "${HRED}Aborted!${NC}"
				break
			else
				echo -e "${HRED}Incorrect selection! Try again.${NC}"
			fi
		done
		unset PACK_LIST
	else
    echo -e "${HRED}There are no previously un-installed apps to re-install.${NC}"
  fi
}

# =====  get device properties/info
DEVICE_INFO() {
  var=$("$ADB" shell getprop)
  echo -e "${GREEN}${BOLD}$var${NC}"
}

# ===== install android udev rules
UDEV_RULES() {
	echo -e "	${GREEN}${BOLD}Android Udev Rules${NC}"
	echo -e "${GREEN}If your device is not being recognized when plugged to"
	echo -e "usb, then you may be missing the '51-android.rules' file in"
	echo -e "/etc/udev/rules.d directory.${NC}"
	echo ""
	echo "Install 51-android.rules?"
	read -ep "(Y/n) $ " Y_UDEV
	echo ""
	if [[ -z "$Y_UDEV" || "$Y_UDEV" =~ ^([yY|[yY][eE][sS]]) ]]; then
		sudo cp -f "$CONFIG_DIR"/51-android.rules /etc/udev/rules.d/51-android.rules
		sudo chmod a+r /etc/udev/rules.d/51-android.rules
		if [ $(cat /etc/os-release | grep -oP '(?<=ID_LIKE=).*') = debian ]; then
			sudo service udev restart
		else
			sudo udevadm control --reload-rules && sudo udevadm trigger
		fi
		if [[ -f /etc/udev/rules.d/51-android.rules ]]; then
			echo -e "${GREEN}Done!${NC}"
		else
			echo -e "${HRED}Aborted! Could not install. Try manual installation.${NC}"
		fi
	else
		echo -e "${HRED}Aborted!${NC}"
	fi
}

# ===== check for update
VISIT_ITG() {
	echo ""
	echo -e "${GREEN}Visit website?${NC}"
	read -ep "(Y/n) $ " VISIT
	if [[ -z "$VISIT" || "$VISIT" =~ ^([yY]|[yY][eE][sS]) ]]; then
		if command -v xdg-open > /dev/null; then
			xdg-open "$UPDATE_URL" > /dev/null 2>&1
		elif command -v gnome-open > /dev/null; then
			gnome-open "$UPDATE_URL" > /dev/null 2>&1
		fi
	fi
	clear
}
CHECK_FOR_UPDATE() {
	echo -e "${GREEN}Please wait...${NC}"
	echo ""
	SITE_VERSION=$(wget -q "$REPO_URL" -O - | grep -m 1 -o -P '.{0,0}Debloat Android No Root v.{0,3}')
	clear
	if [ "$VERSION" = "$SITE_VERSION" ]; then
		echo -e "${GREEN}$VERSION"
		echo ""
		echo "No update available. Check again later."
		echo ""
		echo -e "For more info visit:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	else
		echo -e "${GREEN}Update available!"
		echo ""
		echo -e "To download the latest version go to:${NC}"
		echo -e "${CYAN}$UPDATE_URL${NC}"
		VISIT_ITG
	fi
}

# ===== create desktop shortcut
DESKTOP_SHORTCUT() {
	echo "[Desktop Entry]" > "$DESKTOP_SHORTCUT"
	echo "Type=Application" >> "$DESKTOP_SHORTCUT"
	echo "Name=$PROJECT_NAME" >> "$DESKTOP_SHORTCUT"
	echo "Comment=$DESCRIPTION" >> "$DESKTOP_SHORTCUT"
	echo "Exec=\"$THIS_SCRIPT\"" >> "$DESKTOP_SHORTCUT"
	echo "Icon=$ICON" >> "$DESKTOP_SHORTCUT"
	echo "Categories=Development;" >> "$DESKTOP_SHORTCUT"
	echo "Terminal=true" >> "$DESKTOP_SHORTCUT"

	if [[ -f "$DESKTOP_SHORTCUT" ]]; then
		echo -e "${GREEN}Desktop entry added for ${CYAN}${BOLD}$(whoami)${NC}"
		echo -e "${GREEN}Check your apps menu for the shortcut.${NC}"
	else
		echo -e "${HRED}oops! Shortcut failed. Please try again.${NC}"
	fi
}

# ===== menu
SELECTION=
until [ "$SELECTION" = "0" ]; do
	clear
	echo -e "${BLUEBG}${EXPND}${WHITE}${BOLD}$NAME_TXT${NC}"
	echo ""
	echo "	1  -  Disable Apps"
	echo "	2  -  Re-enable Apps"
	echo "	3  -  Uninstall Apps"
	echo "	4  -  Re-install Apps"
	echo "	5  -  Device Info"
	echo "	6  -  Install 51-android.rules"
	echo "	7  -  Check For Updates"
	echo "	00 -  Add Desktop Shortcut"
	echo "	0  -  Exit"
	echo ""
	echo -n "	Enter selection: "
	read SELECTION
	echo ""
	case $SELECTION in
			1 ) clear ; DISABLE_PACKAGES ; PRESS_ENTER ;;
			2 ) clear ; REENABLE_PACKAGES ; PRESS_ENTER ;;
	    3 ) clear ; UNINSTALL_PACKAGES ; PRESS_ENTER ;;
	    4 ) clear ; REINSTALL_PACKAGES ; PRESS_ENTER ;;
	    5 ) clear ; DEVICE_INFO ; PRESS_ENTER ;;
	    6 ) clear ; UDEV_RULES ; PRESS_ENTER ;;
	    7 ) clear ; CHECK_FOR_UPDATE ; PRESS_ENTER ;;
	    00 ) clear ; DESKTOP_SHORTCUT ; PRESS_ENTER ;;
      0 ) clear ; exit ;;
	    * ) clear ; INCORRECT_SELECTION ; PRESS_ENTER ;;
	esac
done
